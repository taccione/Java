import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
		Scanner tastiera = new Scanner (System.in);
		int lunghezza; 
		System.out.println("Inserisci la lunghezza dell'array: ");
		lunghezza = tastiera.nextInt();
		int[] array = new int [lunghezza];
		System.out.println("Inserisci i valori dell'array: ");
		for(int i = 0; i < lunghezza; i++) {
		    array[i] = tastiera.nextInt();
		}
		BubbleSort(array);
		System.out.println("Vettore ordinato: ");
		for(int i = 0; i < lunghezza; i++) {
		    System.out.println(array[i]);
		}
	}
	
	public static void BubbleSort(int[] array) {
	    int n = array.length;
	    for(int i = 0; i < n - 1; i++) {
	        for(int j = 0; j < n - i - 1; j++) {
	            if (array[j] > array [j+1]) {
	                int temp = array[j];
	                array[j] = array [j+1];
	                array[j+1] = temp;
	            }
	        }
	    }
	}
}

// rubrica telefonica 
/*
- faccio creare un 'utente' facendo inserire nome, cognome e numero di telefono dall'utente 
- inserimento numeri delle ultime chiamate tramite metodo InserisciContatto (int n, String nome,Scanner tastiera) {
    int contatti = tastiera.nextInt();
    for (int i = 0; i < contatti; i++) {
        n = tastiera.nextInt(); // numero di telefono
        nome = tastiera.nextLine(); // nome assegnato a n
    }
}
metodo richiamato nel main per l'inserimento dei contatti delle ultime chiamate
- creare un metodo di controllo e scelta se il contatto deve essere nascosto oppure mantenuto visibile
- creare una password (String) che sblocchi e renda visibili i contatti nascosti
metodo boolean che faccia scegliere all'utente se nascondere o no il contatto (n,nome)
se l'utente vuole visualizzare (tramite metodo Visualizza) un contatto ed esso è nascosto, chiede la password, inserita in precedente dall'utente
- dividere il software in due parti:
  - gestione rubbrica, dove l'utente potra creare, modificare ed eliminare i contatti nella rubbrica
  - gestione chiamate, dove vi è la visualizzaione delle ultime chiamate
  - stampa gestione chiamate
*/

// ordinamento pari 
/*
- inserimento di un array di numeri interi non ripetuti, con dimensione minima di 8 e massima di 10 elementi
- il valore minimo è 1, massimo 30, porre un controllo
- dividere il vettore in altri due vettori, creare un vettore pari e uno dispari
- il vettore dispari rimane cosi 
- il vettore pari viene ordinato tramite BubbleSort(int[] array) {
	    int n = array.length;
	    for(int i = 0; i < n - 1; i++) {
	        for(int j = 0; j < n - i - 1; j++) {
	            if (array[j] > array [j+1]) {
	                int temp = array[j];
	                array[j] = array [j+1];
	                array[j+1] = temp;
	            }
	        }
	    }
	}
- creare un quarto vettore dove gli elementi dispari del vettore dispari vengono lasciati nel loro indice [i] e gli elementi pari vengono scambiati in ordine crescente 
- stampa vettore finale
*/
